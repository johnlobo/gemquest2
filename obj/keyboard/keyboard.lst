                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module keyboard
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _cpct_isAnyKeyPressed_f
                             12 	.globl _cpct_isAnyKeyPressed
                             13 	.globl _cpct_isKeyPressed
                             14 	.globl _cpct_scanKeyboard_f
                             15 	.globl _cpct_scanKeyboard
                             16 	.globl _cpct_memcpy
                             17 	.globl _tempKeys
                             18 	.globl _initKeys
                             19 	.globl _wait4OneKey
                             20 	.globl _wait4UserKeypress
                             21 	.globl _waitForAKey
                             22 	.globl _checkKeys
                             23 	.globl _waitKeyUp
                             24 	.globl _wait4Key
                             25 ;--------------------------------------------------------
                             26 ; special function registers
                             27 ;--------------------------------------------------------
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DATA
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _INITIALIZED
                             36 ;--------------------------------------------------------
                             37 ; absolute external ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DABS (ABS)
                             40 ;--------------------------------------------------------
                             41 ; global & static initialisations
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _GSINIT
                             45 	.area _GSFINAL
                             46 	.area _GSINIT
                             47 ;--------------------------------------------------------
                             48 ; Home
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _HOME
                             52 ;--------------------------------------------------------
                             53 ; code
                             54 ;--------------------------------------------------------
                             55 	.area _CODE
                             56 ;src/keyboard/keyboard.c:33: void initKeys(){
                             57 ;	---------------------------------
                             58 ; Function initKeys
                             59 ; ---------------------------------
   0000                      60 _initKeys::
                             61 ;src/keyboard/keyboard.c:34: cpct_memcpy(&keys, &tempKeys, sizeof(TKeys));
   0000 21 12 00      [10]   62 	ld	hl, #0x0012
   0003 E5            [11]   63 	push	hl
   0004 21r10r00      [10]   64 	ld	hl, #_tempKeys
   0007 E5            [11]   65 	push	hl
   0008 21r00r00      [10]   66 	ld	hl, #_keys
   000B E5            [11]   67 	push	hl
   000C CDr00r00      [17]   68 	call	_cpct_memcpy
   000F C9            [10]   69 	ret
   0010                      70 _tempKeys:
   0010 00 01                71 	.dw #0x0100
   0012 00 04                72 	.dw #0x0400
   0014 01 01                73 	.dw #0x0101
   0016 00 02                74 	.dw #0x0200
   0018 05 80                75 	.dw #0x8005
   001A 02 04                76 	.dw #0x0402
   001C 05 10                77 	.dw #0x1005
   001E 08 04                78 	.dw #0x0408
   0020 04 40                79 	.dw #0x4004
                             80 ;src/keyboard/keyboard.c:45: void wait4OneKey() {
                             81 ;	---------------------------------
                             82 ; Function wait4OneKey
                             83 ; ---------------------------------
   0022                      84 _wait4OneKey::
                             85 ;src/keyboard/keyboard.c:50: keypressed = waitForAKey();
   0022 CDr49r00      [17]   86 	call	_waitForAKey
                             87 ;src/keyboard/keyboard.c:51: waitKeyUp(keypressed);
   0025 E5            [11]   88 	push	hl
   0026 CDrCFr00      [17]   89 	call	_waitKeyUp
   0029 F1            [10]   90 	pop	af
                             91 ;src/keyboard/keyboard.c:53: return;
   002A C9            [10]   92 	ret
                             93 ;src/keyboard/keyboard.c:65: u32 wait4UserKeypress() {
                             94 ;	---------------------------------
                             95 ; Function wait4UserKeypress
                             96 ; ---------------------------------
   002B                      97 _wait4UserKeypress::
                             98 ;src/keyboard/keyboard.c:69: do {
   002B 21 00 00      [10]   99 	ld	hl,#0x0000
   002E 5D            [ 4]  100 	ld	e,l
   002F 54            [ 4]  101 	ld	d,h
   0030                     102 00101$:
                            103 ;src/keyboard/keyboard.c:70: c++;                       // One more cycle
   0030 2C            [ 4]  104 	inc	l
   0031 20 07         [12]  105 	jr	NZ,00115$
   0033 24            [ 4]  106 	inc	h
   0034 20 04         [12]  107 	jr	NZ,00115$
   0036 1C            [ 4]  108 	inc	e
   0037 20 01         [12]  109 	jr	NZ,00115$
   0039 14            [ 4]  110 	inc	d
   003A                     111 00115$:
                            112 ;src/keyboard/keyboard.c:71: cpct_scanKeyboard_f();     // Scan the scan the keyboard
   003A E5            [11]  113 	push	hl
   003B D5            [11]  114 	push	de
   003C CDr00r00      [17]  115 	call	_cpct_scanKeyboard_f
   003F CDr00r00      [17]  116 	call	_cpct_isAnyKeyPressed_f
   0042 7D            [ 4]  117 	ld	a, l
   0043 D1            [10]  118 	pop	de
   0044 E1            [10]  119 	pop	hl
   0045 B7            [ 4]  120 	or	a, a
   0046 28 E8         [12]  121 	jr	Z,00101$
                            122 ;src/keyboard/keyboard.c:74: return c;
   0048 C9            [10]  123 	ret
                            124 ;src/keyboard/keyboard.c:86: cpct_keyID waitForAKey() {
                            125 ;	---------------------------------
                            126 ; Function waitForAKey
                            127 ; ---------------------------------
   0049                     128 _waitForAKey::
   0049 DD E5         [15]  129 	push	ix
   004B DD 21 00 00   [14]  130 	ld	ix,#0
   004F DD 39         [15]  131 	add	ix,sp
   0051 F5            [11]  132 	push	af
                            133 ;src/keyboard/keyboard.c:89: u8 i = 10, *keys = cpct_keyboardStatusBuffer + 9;
   0052 16 0A         [ 7]  134 	ld	d, #0x0a
                            135 ;src/keyboard/keyboard.c:93: do { cpct_scanKeyboard(); } while ( ! cpct_isAnyKeyPressed() );
   0054                     136 00101$:
   0054 D5            [11]  137 	push	de
   0055 CDr00r00      [17]  138 	call	_cpct_scanKeyboard
   0058 CDr00r00      [17]  139 	call	_cpct_isAnyKeyPressed
   005B D1            [10]  140 	pop	de
   005C 7D            [ 4]  141 	ld	a, l
   005D B7            [ 4]  142 	or	a, a
   005E 28 F4         [12]  143 	jr	Z,00101$
                            144 ;src/keyboard/keyboard.c:96: do {
   0060 01r09r00      [10]  145 	ld	bc, #(_cpct_keyboardStatusBuffer + 0x0009)
   0063 1E 0A         [ 7]  146 	ld	e, #0x0a
   0065                     147 00106$:
                            148 ;src/keyboard/keyboard.c:99: keypressed = *keys ^ 0xFF;
   0065 0A            [ 7]  149 	ld	a, (bc)
   0066 EE FF         [ 7]  150 	xor	a, #0xff
   0068 DD 77 FE      [19]  151 	ld	-2 (ix), a
   006B DD 36 FF 00   [19]  152 	ld	-1 (ix), #0x00
                            153 ;src/keyboard/keyboard.c:101: return (keypressed << 8) + (i - 1);  // Formato cpct_keyID: 8 primeros bits = máscara de tecla, 8 siguientes fila del teclado (0-9)
   006F DD 66 FE      [19]  154 	ld	h, -2 (ix)
   0072 2E 00         [ 7]  155 	ld	l, #0x00
                            156 ;src/keyboard/keyboard.c:100: if (keypressed)
   0074 DD 7E FF      [19]  157 	ld	a, -1 (ix)
   0077 DD B6 FE      [19]  158 	or	a,-2 (ix)
   007A 28 07         [12]  159 	jr	Z,00105$
                            160 ;src/keyboard/keyboard.c:101: return (keypressed << 8) + (i - 1);  // Formato cpct_keyID: 8 primeros bits = máscara de tecla, 8 siguientes fila del teclado (0-9)
   007C 4A            [ 4]  161 	ld	c, d
   007D 06 00         [ 7]  162 	ld	b, #0x00
   007F 0B            [ 6]  163 	dec	bc
   0080 09            [11]  164 	add	hl, bc
   0081 18 0A         [12]  165 	jr	00109$
   0083                     166 00105$:
                            167 ;src/keyboard/keyboard.c:102: keys--;
   0083 0B            [ 6]  168 	dec	bc
                            169 ;src/keyboard/keyboard.c:103: } while (--i);
   0084 1D            [ 4]  170 	dec	e
   0085 7B            [ 4]  171 	ld	a,e
   0086 57            [ 4]  172 	ld	d,a
                            173 ;src/keyboard/keyboard.c:104: return (keypressed << 8) + (i - 1);
   0087 B7            [ 4]  174 	or	a,a
   0088 20 DB         [12]  175 	jr	NZ,00106$
   008A 57            [ 4]  176 	ld	d,a
   008B 1B            [ 6]  177 	dec	de
   008C 19            [11]  178 	add	hl,de
   008D                     179 00109$:
   008D DD F9         [10]  180 	ld	sp, ix
   008F DD E1         [14]  181 	pop	ix
   0091 C9            [10]  182 	ret
                            183 ;src/keyboard/keyboard.c:118: u8 checkKeys(const cpct_keyID *k, u8 numk)
                            184 ;	---------------------------------
                            185 ; Function checkKeys
                            186 ; ---------------------------------
   0092                     187 _checkKeys::
   0092 DD E5         [15]  188 	push	ix
   0094 DD 21 00 00   [14]  189 	ld	ix,#0
   0098 DD 39         [15]  190 	add	ix,sp
                            191 ;src/keyboard/keyboard.c:122: if (cpct_isAnyKeyPressed())
   009A CDr00r00      [17]  192 	call	_cpct_isAnyKeyPressed
   009D 7D            [ 4]  193 	ld	a, l
   009E B7            [ 4]  194 	or	a, a
   009F 28 29         [12]  195 	jr	Z,00105$
                            196 ;src/keyboard/keyboard.c:124: for (i = 1; i <= numk; i++, k++)
   00A1 01 01 01      [10]  197 	ld	bc,#0x0101
   00A4 DD 5E 04      [19]  198 	ld	e,4 (ix)
   00A7 DD 56 05      [19]  199 	ld	d,5 (ix)
   00AA                     200 00107$:
   00AA DD 7E 06      [19]  201 	ld	a, 6 (ix)
   00AD 90            [ 4]  202 	sub	a, b
   00AE 38 1A         [12]  203 	jr	C,00105$
                            204 ;src/keyboard/keyboard.c:126: if (cpct_isKeyPressed(*k))
   00B0 6B            [ 4]  205 	ld	l, e
   00B1 62            [ 4]  206 	ld	h, d
   00B2 7E            [ 7]  207 	ld	a, (hl)
   00B3 23            [ 6]  208 	inc	hl
   00B4 66            [ 7]  209 	ld	h, (hl)
   00B5 6F            [ 4]  210 	ld	l, a
   00B6 C5            [11]  211 	push	bc
   00B7 D5            [11]  212 	push	de
   00B8 CDr00r00      [17]  213 	call	_cpct_isKeyPressed
   00BB D1            [10]  214 	pop	de
   00BC C1            [10]  215 	pop	bc
   00BD 7D            [ 4]  216 	ld	a, l
   00BE B7            [ 4]  217 	or	a, a
   00BF 28 03         [12]  218 	jr	Z,00108$
                            219 ;src/keyboard/keyboard.c:127: return i;
   00C1 69            [ 4]  220 	ld	l, c
   00C2 18 08         [12]  221 	jr	00109$
   00C4                     222 00108$:
                            223 ;src/keyboard/keyboard.c:124: for (i = 1; i <= numk; i++, k++)
   00C4 04            [ 4]  224 	inc	b
   00C5 48            [ 4]  225 	ld	c, b
   00C6 13            [ 6]  226 	inc	de
   00C7 13            [ 6]  227 	inc	de
   00C8 18 E0         [12]  228 	jr	00107$
   00CA                     229 00105$:
                            230 ;src/keyboard/keyboard.c:130: return 0;
   00CA 2E 00         [ 7]  231 	ld	l, #0x00
   00CC                     232 00109$:
   00CC DD E1         [14]  233 	pop	ix
   00CE C9            [10]  234 	ret
                            235 ;src/keyboard/keyboard.c:140: void waitKeyUp(cpct_keyID key){
                            236 ;	---------------------------------
                            237 ; Function waitKeyUp
                            238 ; ---------------------------------
   00CF                     239 _waitKeyUp::
                            240 ;src/keyboard/keyboard.c:142: while (cpct_isKeyPressed(key)) {
   00CF                     241 00101$:
   00CF C1            [10]  242 	pop	bc
   00D0 E1            [10]  243 	pop	hl
   00D1 E5            [11]  244 	push	hl
   00D2 C5            [11]  245 	push	bc
   00D3 CDr00r00      [17]  246 	call	_cpct_isKeyPressed
   00D6 7D            [ 4]  247 	ld	a, l
   00D7 B7            [ 4]  248 	or	a, a
   00D8 C8            [11]  249 	ret	Z
                            250 ;src/keyboard/keyboard.c:143: cpct_scanKeyboard_f();
   00D9 CDr00r00      [17]  251 	call	_cpct_scanKeyboard_f
   00DC 18 F1         [12]  252 	jr	00101$
                            253 ;src/keyboard/keyboard.c:154: u32 wait4Key(cpct_keyID key) {
                            254 ;	---------------------------------
                            255 ; Function wait4Key
                            256 ; ---------------------------------
   00DE                     257 _wait4Key::
                            258 ;src/keyboard/keyboard.c:158: while(!cpct_isKeyPressed(key));
   00DE                     259 00101$:
   00DE C1            [10]  260 	pop	bc
   00DF E1            [10]  261 	pop	hl
   00E0 E5            [11]  262 	push	hl
   00E1 C5            [11]  263 	push	bc
   00E2 CDr00r00      [17]  264 	call	_cpct_isKeyPressed
   00E5 7D            [ 4]  265 	ld	a, l
   00E6 B7            [ 4]  266 	or	a, a
   00E7 28 F5         [12]  267 	jr	Z,00101$
                            268 ;src/keyboard/keyboard.c:159: do{
   00E9 21 00 00      [10]  269 	ld	hl,#0x0000
   00EC 5D            [ 4]  270 	ld	e,l
   00ED 54            [ 4]  271 	ld	d,h
   00EE                     272 00104$:
                            273 ;src/keyboard/keyboard.c:160: c++;
   00EE 2C            [ 4]  274 	inc	l
   00EF 20 07         [12]  275 	jr	NZ,00125$
   00F1 24            [ 4]  276 	inc	h
   00F2 20 04         [12]  277 	jr	NZ,00125$
   00F4 1C            [ 4]  278 	inc	e
   00F5 20 01         [12]  279 	jr	NZ,00125$
   00F7 14            [ 4]  280 	inc	d
   00F8                     281 00125$:
                            282 ;src/keyboard/keyboard.c:162: while(cpct_isKeyPressed(key));
   00F8 E5            [11]  283 	push	hl
   00F9 D5            [11]  284 	push	de
   00FA 21 06 00      [10]  285 	ld	hl, #6
   00FD 39            [11]  286 	add	hl, sp
   00FE 7E            [ 7]  287 	ld	a, (hl)
   00FF 23            [ 6]  288 	inc	hl
   0100 66            [ 7]  289 	ld	h, (hl)
   0101 6F            [ 4]  290 	ld	l, a
   0102 CDr00r00      [17]  291 	call	_cpct_isKeyPressed
   0105 7D            [ 4]  292 	ld	a, l
   0106 D1            [10]  293 	pop	de
   0107 E1            [10]  294 	pop	hl
   0108 B7            [ 4]  295 	or	a, a
   0109 20 E3         [12]  296 	jr	NZ,00104$
                            297 ;src/keyboard/keyboard.c:164: return c;
   010B C9            [10]  298 	ret
                            299 	.area _CODE
                            300 	.area _INITIALIZER
                            301 	.area _CABS (ABS)
