                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _initMain
                             13 	.globl _myInterruptHandler
                             14 	.globl _drawWindow
                             15 	.globl _drawWindow2
                             16 	.globl _reset_cpc
                             17 	.globl _drawText2
                             18 	.globl _initKeys
                             19 	.globl _wait4UserKeypress
                             20 	.globl _wait4OneKey
                             21 	.globl _playGame
                             22 	.globl _initGame
                             23 	.globl _cpct_restoreState_mxor_u8
                             24 	.globl _cpct_setSeed_mxor
                             25 	.globl _cpct_getScreenPtr
                             26 	.globl _cpct_setPALColour
                             27 	.globl _cpct_setPalette
                             28 	.globl _cpct_setVideoMode
                             29 	.globl _cpct_px2byteM0
                             30 	.globl _cpct_scanKeyboard_if
                             31 	.globl _cpct_setStackLocation
                             32 	.globl _cpct_memset
                             33 	.globl _cpct_setInterruptHandler
                             34 	.globl _cpct_disableFirmware
                             35 	.globl _sp_palette0
                             36 ;--------------------------------------------------------
                             37 ; special function registers
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DATA
   0000                      43 _myInterruptHandler_i_1_117:
   0000                      44 	.ds 1
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _INITIALIZED
                             49 ;--------------------------------------------------------
                             50 ; absolute external ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DABS (ABS)
                             53 ;--------------------------------------------------------
                             54 ; global & static initialisations
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _GSINIT
                             58 	.area _GSFINAL
                             59 	.area _GSINIT
                             60 ;--------------------------------------------------------
                             61 ; Home
                             62 ;--------------------------------------------------------
                             63 	.area _HOME
                             64 	.area _HOME
                             65 ;--------------------------------------------------------
                             66 ; code
                             67 ;--------------------------------------------------------
                             68 	.area _CODE
                             69 ;src/main.c:50: cpctm_createTransparentMaskTable(g_tablatrans, 0x100, M0, 0);
                             70 ;	---------------------------------
                             71 ; Function dummy_cpct_transparentMaskTable0M0_container
                             72 ; ---------------------------------
   0000                      73 _dummy_cpct_transparentMaskTable0M0_container::
                             74 	.area _g_tablatrans_ (ABS) 
   0100                      75 	.org 0x100 
   0100                      76 	 _g_tablatrans::
   0100 FF AA 55 00 AA AA    77 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0108 55 00 55 00 00 00    78 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0110 AA AA 00 00 AA AA    79 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0118 00 00 00 00 00 00    80 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0120 55 00 55 00 00 00    81 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0128 55 00 55 00 00 00    82 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0130 00 00 00 00 00 00    83 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0138 00 00 00 00 00 00    84 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0140 AA AA 00 00 AA AA    85 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0148 00 00 00 00 00 00    86 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0150 AA AA 00 00 AA AA    87 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0158 00 00 00 00 00 00    88 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0160 00 00 00 00 00 00    89 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0168 00 00 00 00 00 00    90 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0170 00 00 00 00 00 00    91 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0178 00 00 00 00 00 00    92 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0180 55 00 55 00 00 00    93 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0188 55 00 55 00 00 00    94 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0190 00 00 00 00 00 00    95 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0198 00 00 00 00 00 00    96 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A0 55 00 55 00 00 00    97 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A8 55 00 55 00 00 00    98 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B0 00 00 00 00 00 00    99 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B8 00 00 00 00 00 00   100 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C0 00 00 00 00 00 00   101 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C8 00 00 00 00 00 00   102 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D0 00 00 00 00 00 00   103 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D8 00 00 00 00 00 00   104 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E0 00 00 00 00 00 00   105 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E8 00 00 00 00 00 00   106 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F0 00 00 00 00 00 00   107 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F8 00 00 00 00 00 00   108 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            109 	.area _CSEG (REL, CON) 
                            110 ;src/main.c:61: void myInterruptHandler()
                            111 ;	---------------------------------
                            112 ; Function myInterruptHandler
                            113 ; ---------------------------------
   0000                     114 _myInterruptHandler::
                            115 ;src/main.c:65: i++;
   0000 FD 21r00r00   [14]  116 	ld	iy, #_myInterruptHandler_i_1_117
   0004 FD 34 00      [23]  117 	inc	0 (iy)
                            118 ;src/main.c:66: switch (i) {
   0007 FD 7E 00      [19]  119 	ld	a, 0 (iy)
   000A D6 04         [ 7]  120 	sub	a, #0x04
   000C CAr00r00      [10]  121 	jp	Z,_cpct_scanKeyboard_if
   000F FD 7E 00      [19]  122 	ld	a, 0 (iy)
   0012 D6 05         [ 7]  123 	sub	a, #0x05
   0014 28 0B         [12]  124 	jr	Z,00103$
   0016 FD 7E 00      [19]  125 	ld	a, 0 (iy)
   0019 D6 06         [ 7]  126 	sub	a, #0x06
   001B 28 04         [12]  127 	jr	Z,00103$
   001D C9            [10]  128 	ret
                            129 ;src/main.c:67: case 4:
                            130 ;src/main.c:68: cpct_scanKeyboard_if();
                            131 ;src/main.c:69: break;
   001E C3r00r00      [10]  132 	jp  _cpct_scanKeyboard_if
                            133 ;src/main.c:72: case 6:
   0021                     134 00103$:
                            135 ;src/main.c:73: i = 0;
   0021 21r00r00      [10]  136 	ld	hl,#_myInterruptHandler_i_1_117 + 0
   0024 36 00         [10]  137 	ld	(hl), #0x00
                            138 ;src/main.c:74: }
   0026 C9            [10]  139 	ret
   0027                     140 _sp_palette0:
   0027 54                  141 	.db #0x54	; 84	'T'
   0028 4D                  142 	.db #0x4d	; 77	'M'
   0029 40                  143 	.db #0x40	; 64
   002A 5C                  144 	.db #0x5c	; 92
   002B 4C                  145 	.db #0x4c	; 76	'L'
   002C 4E                  146 	.db #0x4e	; 78	'N'
   002D 4A                  147 	.db #0x4a	; 74	'J'
   002E 52                  148 	.db #0x52	; 82	'R'
   002F 56                  149 	.db #0x56	; 86	'V'
   0030 5E                  150 	.db #0x5e	; 94
   0031 53                  151 	.db #0x53	; 83	'S'
   0032 5F                  152 	.db #0x5f	; 95
   0033 55                  153 	.db #0x55	; 85	'U'
   0034 58                  154 	.db #0x58	; 88	'X'
   0035 44                  155 	.db #0x44	; 68	'D'
   0036 4B                  156 	.db #0x4b	; 75	'K'
                            157 ;src/main.c:78: void initMain()
                            158 ;	---------------------------------
                            159 ; Function initMain
                            160 ; ---------------------------------
   0037                     161 _initMain::
                            162 ;src/main.c:84: cpct_setVideoMode(0);
   0037 2E 00         [ 7]  163 	ld	l, #0x00
   0039 CDr00r00      [17]  164 	call	_cpct_setVideoMode
                            165 ;src/main.c:85: cpct_setPalette(sp_palette0, 16);
   003C 21 10 00      [10]  166 	ld	hl, #0x0010
   003F E5            [11]  167 	push	hl
   0040 21r27r00      [10]  168 	ld	hl, #_sp_palette0
   0043 E5            [11]  169 	push	hl
   0044 CDr00r00      [17]  170 	call	_cpct_setPalette
                            171 ;src/main.c:86: cpct_setBorder(HW_WHITE);
   0047 21 10 00      [10]  172 	ld	hl, #0x0010
   004A E5            [11]  173 	push	hl
   004B CDr00r00      [17]  174 	call	_cpct_setPALColour
                            175 ;src/main.c:88: cpct_memset(CPCT_VMEM_START, cpct_px2byteM0(3,3), 0x4000);   // Clear de Screen BGCOLOR=Black
   004E 21 03 03      [10]  176 	ld	hl, #0x0303
   0051 E5            [11]  177 	push	hl
   0052 CDr00r00      [17]  178 	call	_cpct_px2byteM0
   0055 45            [ 4]  179 	ld	b, l
   0056 21 00 40      [10]  180 	ld	hl, #0x4000
   0059 E5            [11]  181 	push	hl
   005A C5            [11]  182 	push	bc
   005B 33            [ 6]  183 	inc	sp
   005C 26 C0         [ 7]  184 	ld	h, #0xc0
   005E E5            [11]  185 	push	hl
   005F CDr00r00      [17]  186 	call	_cpct_memset
                            187 ;src/main.c:93: vmem = cpct_getScreenPtr (CPCT_VMEM_START, 12, 32);
   0062 21 0C 20      [10]  188 	ld	hl, #0x200c
   0065 E5            [11]  189 	push	hl
   0066 21 00 C0      [10]  190 	ld	hl, #0xc000
   0069 E5            [11]  191 	push	hl
   006A CDr00r00      [17]  192 	call	_cpct_getScreenPtr
                            193 ;src/main.c:98: drawWindow2(10,60,60,60);
   006D 21 3C 3C      [10]  194 	ld	hl, #0x3c3c
   0070 E5            [11]  195 	push	hl
   0071 2E 0A         [ 7]  196 	ld	l, #0x0a
   0073 E5            [11]  197 	push	hl
   0074 CDr00r00      [17]  198 	call	_drawWindow2
   0077 F1            [10]  199 	pop	af
   0078 F1            [10]  200 	pop	af
                            201 ;src/main.c:101: drawText2("GEMQUEST IS READY!!", 20, 82,  COLORTXT_WHITE, NORMALHEIGHT, OPAQUE);
   0079 21 01 00      [10]  202 	ld	hl, #0x0001
   007C E5            [11]  203 	push	hl
   007D 2E 52         [ 7]  204 	ld	l, #0x52
   007F E5            [11]  205 	push	hl
   0080 3E 14         [ 7]  206 	ld	a, #0x14
   0082 F5            [11]  207 	push	af
   0083 33            [ 6]  208 	inc	sp
   0084 21rC5r00      [10]  209 	ld	hl, #___str_0
   0087 E5            [11]  210 	push	hl
   0088 CDr00r00      [17]  211 	call	_drawText2
   008B 21 07 00      [10]  212 	ld	hl, #7
   008E 39            [11]  213 	add	hl, sp
   008F F9            [ 6]  214 	ld	sp, hl
                            215 ;src/main.c:102: drawText2("Press any key to continue", 15, 102,  COLORTXT_YELLOW, NORMALHEIGHT, OPAQUE);
   0090 21 01 00      [10]  216 	ld	hl, #0x0001
   0093 E5            [11]  217 	push	hl
   0094 21 66 01      [10]  218 	ld	hl, #0x0166
   0097 E5            [11]  219 	push	hl
   0098 3E 0F         [ 7]  220 	ld	a, #0x0f
   009A F5            [11]  221 	push	af
   009B 33            [ 6]  222 	inc	sp
   009C 21rD9r00      [10]  223 	ld	hl, #___str_1
   009F E5            [11]  224 	push	hl
   00A0 CDr00r00      [17]  225 	call	_drawText2
   00A3 21 07 00      [10]  226 	ld	hl, #7
   00A6 39            [11]  227 	add	hl, sp
   00A7 F9            [ 6]  228 	ld	sp, hl
                            229 ;src/main.c:104: seed = wait4UserKeypress();
   00A8 CDr00r00      [17]  230 	call	_wait4UserKeypress
                            231 ;src/main.c:106: if (!seed)
   00AB 7A            [ 4]  232 	ld	a, d
   00AC B3            [ 4]  233 	or	a, e
   00AD B4            [ 4]  234 	or	a, h
   00AE B5            [ 4]  235 	or	a,l
   00AF 20 0A         [12]  236 	jr	NZ,00102$
                            237 ;src/main.c:107: seed++;
   00B1 2C            [ 4]  238 	inc	l
   00B2 20 07         [12]  239 	jr	NZ,00109$
   00B4 24            [ 4]  240 	inc	h
   00B5 20 04         [12]  241 	jr	NZ,00109$
   00B7 1C            [ 4]  242 	inc	e
   00B8 20 01         [12]  243 	jr	NZ,00109$
   00BA 14            [ 4]  244 	inc	d
   00BB                     245 00109$:
   00BB                     246 00102$:
                            247 ;src/main.c:108: cpct_srand(seed);
   00BB CDr00r00      [17]  248 	call	_cpct_setSeed_mxor
   00BE CDr00r00      [17]  249 	call	_cpct_restoreState_mxor_u8
                            250 ;src/main.c:114: initKeys();
   00C1 CDr00r00      [17]  251 	call	_initKeys
   00C4 C9            [10]  252 	ret
   00C5                     253 ___str_0:
   00C5 47 45 4D 51 55 45   254 	.ascii "GEMQUEST IS READY!!"
        53 54 20 49 53 20
        52 45 41 44 59 21
        21
   00D8 00                  255 	.db 0x00
   00D9                     256 ___str_1:
   00D9 50 72 65 73 73 20   257 	.ascii "Press any key to continue"
        61 6E 79 20 6B 65
        79 20 74 6F 20 63
        6F 6E 74 69 6E 75
        65
   00F2 00                  258 	.db 0x00
                            259 ;src/main.c:118: void main(void) {
                            260 ;	---------------------------------
                            261 ; Function main
                            262 ; ---------------------------------
   00F3                     263 _main::
                            264 ;src/main.c:120: cpct_setStackLocation(NEW_STACK_LOCATION);
   00F3 21 00 01      [10]  265 	ld	hl, #0x0100
   00F6 CDr00r00      [17]  266 	call	_cpct_setStackLocation
                            267 ;src/main.c:122: cpct_disableFirmware();
   00F9 CDr00r00      [17]  268 	call	_cpct_disableFirmware
                            269 ;src/main.c:124: cpct_setInterruptHandler( myInterruptHandler );
   00FC 21r00r00      [10]  270 	ld	hl, #_myInterruptHandler
   00FF CDr00r00      [17]  271 	call	_cpct_setInterruptHandler
                            272 ;src/main.c:126: initMain();
   0102 CDr37r00      [17]  273 	call	_initMain
                            274 ;src/main.c:127: initGame();
   0105 CDr00r00      [17]  275 	call	_initGame
                            276 ;src/main.c:128: playGame();
   0108 CDr00r00      [17]  277 	call	_playGame
                            278 ;src/main.c:131: cpct_memset(CPCT_VMEM_START, cpct_px2byteM0(3,3), 0x4000);   // Clear de Screen BGCOLOR=Black
   010B 21 03 03      [10]  279 	ld	hl, #0x0303
   010E E5            [11]  280 	push	hl
   010F CDr00r00      [17]  281 	call	_cpct_px2byteM0
   0112 45            [ 4]  282 	ld	b, l
   0113 21 00 40      [10]  283 	ld	hl, #0x4000
   0116 E5            [11]  284 	push	hl
   0117 C5            [11]  285 	push	bc
   0118 33            [ 6]  286 	inc	sp
   0119 26 C0         [ 7]  287 	ld	h, #0xc0
   011B E5            [11]  288 	push	hl
   011C CDr00r00      [17]  289 	call	_cpct_memset
                            290 ;src/main.c:133: drawWindow();
   011F CDr00r00      [17]  291 	call	_drawWindow
                            292 ;src/main.c:134: drawText2("PRESS ANY KEY TO END", 18, 98,  COLORTXT_YELLOW, NORMALHEIGHT, OPAQUE);
   0122 21 01 00      [10]  293 	ld	hl, #0x0001
   0125 E5            [11]  294 	push	hl
   0126 21 62 01      [10]  295 	ld	hl, #0x0162
   0129 E5            [11]  296 	push	hl
   012A 3E 12         [ 7]  297 	ld	a, #0x12
   012C F5            [11]  298 	push	af
   012D 33            [ 6]  299 	inc	sp
   012E 21r41r01      [10]  300 	ld	hl, #___str_2
   0131 E5            [11]  301 	push	hl
   0132 CDr00r00      [17]  302 	call	_drawText2
   0135 21 07 00      [10]  303 	ld	hl, #7
   0138 39            [11]  304 	add	hl, sp
   0139 F9            [ 6]  305 	ld	sp, hl
                            306 ;src/main.c:135: wait4OneKey();
   013A CDr00r00      [17]  307 	call	_wait4OneKey
                            308 ;src/main.c:136: reset_cpc();
   013D CDr00r00      [17]  309 	call	_reset_cpc
   0140 C9            [10]  310 	ret
   0141                     311 ___str_2:
   0141 50 52 45 53 53 20   312 	.ascii "PRESS ANY KEY TO END"
        41 4E 59 20 4B 45
        59 20 54 4F 20 45
        4E 44
   0155 00                  313 	.db 0x00
                            314 	.area _CODE
                            315 	.area _INITIALIZER
                            316 	.area _CABS (ABS)
